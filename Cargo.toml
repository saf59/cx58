[package]
name = "cx58"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]


[dependencies]
leptos = { version = "0.8.10" , features = ["nonce"] }
leptos_router = { version = "0.8.8" }
leptos_oidc = "0.9.0"
axum = { version = "0.8.6", optional = true }
console_error_panic_hook = { version = "0.1.7", optional = true }
leptos_axum = { version = "0.8.6", optional = true }
leptos_meta = { version = "0.8.5" }
tokio = { version = "1.48.0", features = ["rt-multi-thread"], optional = true }
wasm-bindgen = { version = "0.2.104", optional = true }
serde = { version = "1.0.228", features = ["derive"] }
serde_json = "1.0.145"
cookie = "0.18.1"
reqwest = "0.12.24"
jsonwebtoken = { version = "=10.0.0", features = ["rust_crypto"] }# "9.3.1"
tower = "0.5.2"
thiserror = "2.0.17"
tracing = "0.1.41"
base64 = "0.22.1"
once_cell = "1.21.3"
axum-extra = "0.10.3"
axum-core = "0.5.5"
gloo-net = { version = "0.6", features = ["http"] }
web-sys = "0.3.81"
wasm-bindgen-futures = "0.4.54"
# getrandom =  "0.3.4"
# uuid = "1.18.1"
# futures = "0.3.31"
# fallback = "0.1.3"
# getrandom = "0.2.16"

[target.'cfg(target_arch = "wasm32")'.dependencies]
# getrandom = { version = "0.2.16", features = ["wasm-bindgen"] }
getrandom = { version = "0.3.3", features = ["wasm_js"] }


[dev-dependencies]
tokio = { version = "1.48.0", features = ["rt-multi-thread", "macros"] }
tower = "0.5.2"
http-body-util = "0.1.3"
wiremock = "0.6.5"
chrono = { version = "0.4.42", default-features = false, features = ["clock"] }

[features]
hydrate = [
    "leptos/hydrate",
    "dep:console_error_panic_hook",
    "dep:wasm-bindgen",
]
ssr = [
    "dep:axum",
    "dep:tokio",
    "dep:leptos_axum",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
]

# [target.wasm32-unknown-unknown]
# rustflags = ['--cfg', 'getrandom_backend="wasm_js"']

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "cx58-client"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3080) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3080"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
